# frozen_string_literal: true
require 'stripe_mock'
include Warden::Test::Helpers
Warden.test_mode!

# Feature: User edit
#   As a user
#   I want to edit my user profile
#   So I can change my email address
feature 'User edit', :devise, live: true, js: true do
  let(:stripe_helper) { StripeMock.create_test_helper }

  before(:each) do
    StripeMock.start
    FactoryGirl.reload
  end

  after(:each) do
    StripeMock.stop
    Warden.test_reset!
  end

  # Scenario: User changes email address
  #   Given I am signed in
  #   When I change my email address
  #   Then I see an account updated message
  scenario 'user changes email address' do
    user = FactoryGirl.build(:user)
    user.role = 'admin'
    # user.add_role 'adimin'
    user.save!
    login_as(user, scope: :user)
    visit edit_user_registration_path(user)
    fill_in 'Email', with: 'newemail@example.com'
    fill_in 'Current password', with: user.password
    click_button 'Update'
    txt1 = I18n.t('devise.registrations.updated')
    txt2 = I18n.t('devise.registrations.update_needs_confirmation')
    expect(txt1).to eq "Your account has been updated successfully."
    expect(txt2).to eq "You updated your account successfully, but we need to verify your new email address. Please check your email and follow the confirm link to confirm your new email address."
    expect(page).to have_content(/.*#{txt1}.*|.*#{txt2}.*/)  # this line is same as above two expect's
  end

  # Scenario: User changes email address
  #   version two for rails-stripe-rspec-tests repo
  #   attaches card token to customer, then makes charge with customer.id 
  #   Given I am signed in
  #   When I change my email address
  #   Then I see an account updated message
  scenario 'user changes email address' do
    plan = stripe_helper.create_plan(id: 'silver', amount: 900)
    # The above line creates / mocks / replaces the following:
    # plan = Stripe::Plan.create(
    #   id: 'my_plan',
    #   name: 'StripeMock Default Plan ID',
    #   amount: 1500,
    #   currency: 'usd',
    #   object: 'plan',
    #   livemode: false,
    #   interval: 'month',
    #   interval_count: 1,
    #   trial_period_days: null
    # )
    # any variable of plan can now be tested and any variables
    # not assigned in create_plan are generated by stripe-ruby-mock
    expect(plan.id).to eq 'silver'
    expect(plan.amount).to eq 900
    expect(plan.currency).to eq 'usd'
    expect(plan.interval).to eq 'month'
    expect(plan.interval_count).not_to eq 2
    expect(plan.trial_period_days).not_to eq 7

    card_token = stripe_helper.generate_card_token(
      last4: '4242',
      exp_month: 10,
      exp_year: 2020
    )
    # customer = Stripe::Customer.create(id: 'test_customer')
    customer = Stripe::Customer.create(
      email: 'newuser@example.com',
      description: 'customer creation with card token',
      source: card_token,
      plan: 'silver'
    )
    charge = Stripe::Charge.create({
                                     amount: 900,
                                     currency: 'usd',
                                     interval: 'month',
                                     customer: customer.id,
                                     description: 'a charge with a specific card'
                                   },
                                     idempotency_key: '95ea4310438306ch'
                                  )
    expect(charge.customer).to eq customer.id
    expect(charge.id).to match(/^test_ch/)

    user = FactoryGirl.build(:user, email: 'newuser@example.com')
    user.customer_id = customer.id
    # user.role = 'silver'
    user.add_role 'silver'
    # user.confirmed_at Time.now
    user.save!
    last = User.last
    expect(customer.id).to eq user.customer_id
    expect(user.customer_id).to match(/^test_cus/)
    expect(user.email).to eq 'newuser@example.com'
    expect(user.id).to eq last.id

    stripe_customer = Stripe::Customer.retrieve(customer.id)
    expect(stripe_customer.sources.data[0].last4).to eq '4242'

    user.last_4_digits = customer.sources.data[0].last4
    user.save!

    login_as(user, scope: :user)
    visit edit_user_registration_path(user)
    within '.registrationsedit' do
      fill_in 'Email', with: 'newemail@example.com'
      fill_in 'Current password', with: 'changeme'
    end
    click_button 'Update'
    txt1 = I18n.t('devise.registrations.updated')
    txt2 = I18n.t('devise.registrations.update_needs_confirmation')
    expect(txt1).to eq 'You updated your account successfully.'
    expect(txt2).to eq 'You updated your account successfully,' \
      ' but we need to verify your new email address.' \
      ' Please check your email and click on the confirm' \
      ' link to finalize confirming your new email address.'
    expect(page).to have_content(/.*#{txt1}.*|.*#{txt2}.*/)
  end

  # Scenario: User cannot edit another user's profile
  #   Given I am signed in
  #   When I try to edit another user's profile
  #   Then I see my own 'edit profile' page
  scenario 'user cannot cannot edit profile of another user', :user do
    user = FactoryGirl.build(:user)
    # user.role = 'admin'
    user.add_role 'admin'
    user.save!

    other = FactoryGirl.build(:user, email: 'other@example.com')
    # other.role = 'admin'
    other.add_role 'admin'
    user.save!

    login_as(user, scope: :user)
    visit edit_user_registration_path(other)
    expect(page).to have_content 'Account'
    expect(page).to have_field('Email', with: user.email)

    fill_in 'Email', with: 'anotherprofile@example.com'
    fill_in 'Current password', with: other.password
    click_button 'Update'
    txt = I18n.t('devise.registrations.invalid')
    expect(txt).to eq 'Invalid email or password.'
  end
end
