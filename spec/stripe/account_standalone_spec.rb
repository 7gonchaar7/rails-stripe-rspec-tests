# these tests are NOT yet ready for prime time
# this file may still contain duplicates among the account tests, refactoring those out will occur
require 'pry'

include Warden::Test::Helpers
Warden.test_mode!

# tests for standalone accounts
describe 'Account API', live: true do

  before(:each) do
    StripeMock.start
    account = Stripe::Account.create(
      managed: false,
      country: 'US',
      email: 'bob@example.com'
    )
  end

  after(:each) do
    StripeMock.stop
    Warden.test_reset!
  end

  ### Standalone Accounts : https://stripe.com/docs/connect/standalone-accounts
  it 'allows user to access the platform' do
    pending 'rough sketch of code, needs work'
    client_id = "Your client_id, a unique identifier for your platform, generated by Stripe"
    redirect_uri = "user returns to route you set, after creating/connecting their Stripe Account"
    expect(authorization_code).to match /^auth_/
    expect(Stripe::Error).to_not raise_error
  end

  ### standalone, managed or both ?
  # Authentication via the Stripe-Account header
  it 'creates and retrieves a connected stripe account' do
    pending 'constants are not set'
    Stripe.api_key = PLATFORM_SECRET_KEY
    Stripe::Customer.create(
      { description: "example@stripe.com" },
      { stripe_account: CONNECTED_STRIPE_ACCOUNT_ID }
    )
    # Fetching an account just needs the ID as a parameter
    Stripe::Account.retrieve(CONNECTED_STRIPE_ACCOUNT_ID)
  end

  it 'transfer fails with a could_not_process code' do
    pending 'methods and object names need to be verified'
    expect { Stripe::Account.transfer(card_number: '4000056655665564', amount: 100) }.to raise_error { |e|
      expect(e).to be_a Stripe::Account.error # not sure of this code
      expect(e.http_status).to eq(401)
    }
  end

  it 'transfer fails when verifying recipient SSN or EIN tax ID' do
    pending 'methods and object names need to be verified'
    expect { Stripe::Account.transfer(account_number: '4000056655665564', amount: 100) }.to raise_error { |e|
      expect(e).to be_a Stripe::TransferError # not sure of this code
      expect(e.http_status).to eq(401)
    }
  end

  it 'transfer succeeds with an appropriate response' do
    pending 'methods and object names need to be verified'
    expect { Stripe::Account.transfer(card_number: '4000056655665564', amount: 100) }.to raise_error { |e|
      expect(e).to be_a Stripe::Transfer.error # not sure of this code
      expect(e.http_status).to eq(401)
    }
  end

  ### standalone, managed, or both ?
  # please choose one of the following two tests by uncommenting it, and commenting out the other
  it 'automatic account transfers are enabled' do
    pending 'test to ensure the Transfer API is set to Automatic transfers enabled option'
  end
    
  # it 'manual account transfers are enabled' do
  #   pending 'test to ensure the Transfer API is set to Manual transfers enabled option'
  # end

  # standalone, managed, or both ?
  # verifies the name of the `recipient`* user as required by law
  # *'recipient' is no longer used : replaced by `account`
  it 'verifies the full legal name of the managed account user' do
    pending 'have not finished : in Standalone Stripe may do this'
    user = User.find_by_email('managed_account_user@example.com')
    account = Stripe::Account.retrieve(user.account_id)
    expect(ations).to be 'written'
  end
end